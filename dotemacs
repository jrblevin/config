;;; ~/.emacs: Emacs configuration file.                     -*-emacs-lisp-*-
;;
;; Jason Blevins <jrblevin@sdf.lonestar.org>
;; Raleigh, May 29, 2004
;;
;; Set the following in ~/.Xresources:
;;
;; Emacs.menuBar:		off
;; Emacs.verticalScrollBars:    off
;; Emacs.toolBar:          	off
;; Emacs.internalBorder:      	1
;; Emacs.geometry:		80x35+5+5
;; Emacs.Font:                  fontset-terminus
;; Emacs.Fontset-0: \
;; -xos4-terminus-medium-r-normal--20-200-72-72-c-100-fontset-terminus,\
;; mule-unicode-0100-24ff:-misc-fixed-medium-r-normal-*-13-*-*-*-*-*-iso10646-1,\
;; mule-unicode-2500-33ff:-misc-fixed-medium-r-normal-*-13-*-*-*-*-*-iso10646-1,\
;; mule-unicode-e000-ffff:-misc-fixed-medium-r-normal-*-13-*-*-*-*-*-iso10646-1

;; Set the load path
(setq load-path (cons "~/.emacs.d/lisp" load-path))

;; Tabs versus Spaces: http://www.jwz.org/doc/tabs-vs-spaces.html
(setq-default indent-tabs-mode nil)
(setq tab-width 8)

;; Synchronize Emacs kill buffer with X clipboard.
(setq x-select-enable-clipboard t)

;; Store backup files in one place.
;; http://inamidst.com/config/emacs
(if (file-directory-p "~/.emacs.d/backup")
    (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
    (message "Directory does not exist: ~/.emacs.d/backup"))

;; Choose a color theme.
(require 'color-theme)
(require 'color-theme-subdued)
(color-theme-subdued)

;; Show matching parentheses.
(show-paren-mode 1)

;; Show the time in 24-hour format.
(display-time-mode 1)
(setq display-time-24hr-format t)

;; Show the column number in the mode line.
(column-number-mode 1)

;; Use debian-sensible-browser as generic browser
(setq browse-url-generic-program "debian-sensible-browser")

;; Start the Emacs server
(server-start)
(add-hook 'server-switch-hook
          (lambda nil
            (let ((server-buf (current-buffer)))
              (bury-buffer)
              (switch-to-buffer-other-frame server-buf))))
(setq server-kill-new-buffers t)
(add-hook 'server-done-hook (lambda () (delete-frame)))

;; Don't print a header
(setq ps-print-header nil)

;; Suppress beeps
(setq visible-bell t)

;; Disable startup screen
(setq inhibit-startup-message t)

;;
;; Custom functions
;; ----------------

(defun my-fill-sentence ()
  (interactive)
  (save-excursion
    (forward-char)
    (forward-to-indentation)
    (forward-sentence -1)
    (indent-for-tab-command)
    ;; Make sure the sentence begins on a separate line
    (unless (looking-back "\\(^\\s *\\|\n\\)")
      ;; Insert a line break and remove any leftover trailing whitespace
      (insert "\n")
      (forward-line -1)
      (beginning-of-line)
      (while (re-search-forward "\\s +$" nil t)
        (replace-match "" nil nil)))
    ;; Indent and fill the current sentence
    (let ((beg (point)))
      (forward-sentence)
      (fill-region-as-paragraph beg (point)))
    ;; Make sure the ends on a separate line
    (unless (looking-back "\n")
      (forward-char))
    (unless (or (looking-back "\n") (looking-at "$"))
      (insert "\n"))))

;;
;; AUCTeX
;; ------

(setq TeX-mode-hook '(lambda ()
                       (auto-fill-mode 1)
                       (LaTeX-math-mode 1)))

(setq font-latex-match-slide-title-keywords '("foilhead"))

(setq TeX-output-view-style
      (quote
       (("^dvi$" "^landscape$" "%(o?)xdvi %dS -paper usr -s 7 %d")
        ("^dvi$" "^letterpaper$" "%(o?)xdvi %dS -paper us -s 5 %d")
        ("^dvi$" "." "%(o?)xdvi %dS -s 5 %d")
        ("^pdf$" "." "xpdf %o"))))


;;
;; BibTeX
;; ------

(setq bibtex-user-optional-fields
      '(("keywords" "Item tags and keywords")
        ("url" "A URL where the item can be found"))
      bibtex-align-at-equal-sign t
      bibtex-autokey-name-year-separator ""
      bibtex-autokey-year-title-separator ""
      bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
      bibtex-autokey-titleword-length 30
      bibtex-autokey-titlewords 1
      bibtex-contline-indentation 17)

;; (defun my-bibtex-mode-hook-fn ()
;;   "Function added to `bibtex-mode-hook'."
;;   (setq fill-column 77))

;; (add-hook 'bibtex-mode-hook 'my-bibtex-mode-hook-fn)


;;
;; GNU Octave 
;; ----------

(autoload 'octave-mode "octave-mod" nil t)
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))


;;
;; Big Brother Database
;; --------------------

(require 'bbdb)
(require 'bbdb-autoloads)
(setq bbdb-file "~/.bbdb")
(setq bbdb-default-area-code 919)
(setq bbdb-north-american-phone-numbers-p t)
(setq bbdb-default-country "USA")
(setq bbdb-dwim-net-address-allow-redundancy t)


;;
;; Perl
;; ----

(add-to-list 'auto-mode-alist '("\\.\\([pP][Llm]\\|al\\)\\'" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))

(add-hook 'cperl-mode-hook 'n-cperl-mode-hook t)
(defun n-cperl-mode-hook ()
  (setq cperl-indent-level 4)
  (setq cperl-continued-statement-offset 2)
  (setq cperl-extra-newline-before-brace t))


;;
;; C and C++
;; ---------

;; (defun my-c-mode-common-hook ()
;;   (c-set-style "stroustrup")
;;   (setq c-basic-offset 4)
;;   (c-set-offset 'substatement-open '0)
;;   (c-set-offset 'case-label '+)
;;   (c-set-offset 'innamespace '0)
;;   (setq compilation-window-height 8)
;;   (c-toggle-auto-hungry-state 0)
;;   (c-toggle-hungry-state 0)
;;   (c-toggle-auto-state t))
;; (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;; ;; Automatically insert [], {}, and () pairs.
;; (defun my-c-mode-auto-pair ()
;;   (interactive)
;;   (make-local-variable 'skeleton-pair-alist)
;;   (setq skeleton-pair-alist
;;         '((?\( _ ")")
;;           (?{ \n _ "\n}")
;;           (?\[ _ "]")))
;;   (setq skeleton-pair t)
;;   (local-set-key (kbd "(") 'skeleton-pair-insert-maybe)
;;   (local-set-key (kbd "{") 'skeleton-pair-insert-maybe)
;;   (local-set-key (kbd "`") 'skeleton-pair-insert-maybe)
;;   (local-set-key (kbd "[") 'skeleton-pair-insert-maybe))
;; (add-hook 'c-mode-hook   'my-c-mode-auto-pair)
;; (add-hook 'c++-mode-hook 'my-c-mode-auto-pair)


;;
;; Calendar and Diary
;; ------------------
;;
;; See the following:
;;
;; http://www.dotemacs.de/dotfiles/JasonRumney.emacs.html
;; http://www.zvon.org/other/elisp/Output/index.html
;; http://www.coling.uni-freiburg.de/~schauer/resources/emacs/config/calendar-stuff.el.html
;; http://www.charlescurley.com/emacs.init.html

;; Add ISO format to date formats allowed in diary
(require 'diary-lib)
(require 'calendar)

(setq diary-file (expand-file-name "~/.diary")
      calendar-week-start-day 1
      mark-diary-entries-in-calendar t
      mark-holidays-in-calendar t
      view-diary-entries-initially nil
      mark-diary-entries-in-calendar t
      number-of-diary-entries 7)

(add-hook 'diary-display-hook 'fancy-diary-display)
(add-hook 'today-visible-calendar-hook 'calendar-mark-today)
(add-hook 'list-diary-entries-hook 'sort-diary-entries t)

(setq diary-date-forms
      '((year "-" month "-" day "[^/0-9]")
        (month "/" day "[^/0-9]")
        (month "/" day "/" year "[^0-9]")
        (monthname " *" day "[^,0-9]")
        (monthname " *" day ", *" year "[^0-9]")
        (dayname "\\W")))
(setq calendar-date-display-form
      (quote ((format "%04s-%02d-%02d" year (string-to-int month)
                      (string-to-int day)))))
(setq calendar-time-display-form
      (quote (24-hours ":" minutes (if time-zone " (")
                       time-zone (if time-zone ")"))))


;;
;; Fortran
;; -------

(autoload 'f90-mode "f90" "Fortran 90 mode" t)
(setq auto-mode-alist (cons '("\\.f03$" . f90-mode) auto-mode-alist))
(add-hook 'f90-mode-hook 'my-f90-mode-hook)

(defun my-f90-mode-hook ()
  (setq f90-beginning-ampersand nil
	f90-font-lock-keywords f90-font-lock-keywords-3
	comment-column 50)
  (abbrev-mode 1)			; turn on abbreviation mode
  (turn-on-font-lock)			; for highlighting
  (auto-fill-mode 0))			; turn off auto-filling


;;
;; Markdown
;; --------

(setq markdown-enable-math t)

(autoload 'markdown-mode "markdown-mode.el"
  "Major mode to edit Markdown files" t)

(setq auto-mode-alist (cons '("\\.text$" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.mdwn$" . markdown-mode) auto-mode-alist))

(defun markdown-custom ()
  "markdown-mode-hook"
  ;; Support SmartyPants.pl (installed as, say, /usr/local/bin/smartypants)
  ;; http://daringfireball.net/projects/smartypants/
  (setq markdown-command "markdown | smartypants"))
(add-hook 'markdown-mode-hook '(lambda() (markdown-custom)))

;; Unreleased local customizations
(load-library "markdown-wiki")
(setq markdown-wiki-directories
      (list
       "/home/jrblevin/projects/ikiwiki/ikiwiki/doc/"
       "/home/jrblevin/projects/fortranwiki/"
       "/home/jrblevin/projects/colab/"
       "/home/jrblevin/projects/notes/"))

(load-library "markdown-gtd")
(global-set-key [f11] 'markdown-make-next-action)
(global-set-key [f12] 'markdown-mark-next-action-complete)


;;
;; Timestamps
;; ----------

(require 'time-stamp)
(add-hook 'write-file-hooks 'time-stamp)
(setq time-stamp-active t)
(setq time-stamp-format "%:b %:d, %:y %02H:%02M %Z")
(setq time-stamp-start "\\(Time-stamp:[ \t]+\\\\?[\"<]+\\|Last Modified:[ \t]+\\|@modified[ ]+\\|meta-modified:[ \t]+\\)")
(setq time-stamp-end "\\(\n\\|\\\\?[\">]\\)")
(setq time-stamp-line-limit 10)

(defun my-insert-year ()
  "Insert the current year."
  (interactive "*")
  (insert (format-time-string "%Y")))

(defun my-insert-date ()
  "Insert the current date."
  (interactive "*")
  (insert (format-time-string "%B %e, %Y")))

(defun my-insert-date-time ()
  "Insert the current date and time."
  (interactive "*")
  (insert (format-time-string "%B %e, %Y %02H:%02M %Z")))


;;
;; Global keybindings
;; ------------------

(global-set-key [f3] 'my-insert-date-time)
(global-set-key [f5] 'skeleton-weblog-header)
(global-set-key [f6] 'calendar)
(global-set-key [f7] 'markdown-mode)
(global-set-key [f8] 'plan)
(global-set-key [f9] 'planner-create-task-from-buffer)
(global-set-key "\ej" 'my-fill-sentence)


;;
;; AMPL
;; ----

;; (setq auto-mode-alist
;;       (cons '("\\.mod$" . ampl-mode) auto-mode-alist))
;; (setq auto-mode-alist
;;       (cons '("\\.dat$" . ampl-mode) auto-mode-alist))
;; (setq auto-mode-alist
;;       (cons '("\\.ampl$" . ampl-mode) auto-mode-alist))
;; (setq interpreter-mode-alist
;;       (cons '("ampl" . ampl-mode)
;;             interpreter-mode-alist))

;; (autoload 'ampl-mode "ampl-mode" "AMPL editing mode." t)


;;
;; SES
;; ---

; (autoload 'ses-mode "ses.el" "Spreadsheet mode" t)
; (add-to-list 'auto-mode-alist '("\\.ses$" . ses-mode))

;;
;; css-mode
;; --------

(setq cssm-indent-function #'cssm-c-style-indenter)


;;
;; Org mode
;; --------

(require 'org-install)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)


;;
;; Mutt
;; ----

(defun post-custom()
  "post-hook"
  (load "mutt-alias")
  (setq mutt-alias-file-list '("~/.mutt-aliases"))
  (local-set-key "\C-ci" 'mutt-alias-insert)
  (flyspell-mode 0))
(add-hook 'post-mode-hook '(lambda() (post-custom)))
(setq auto-mode-alist (cons '("mutt-" . post-mode) auto-mode-alist))


;; Ado-mode
;; --------

(defun ado-custom()
  "ado-mode-hook"
  (setq ado-claim-name "Jason Blevins")
  (setq ado-signature-file "~/.emacs.d/.ado-signature")
  (setq ado-site-template-dir "/usr/local/share/emacs/ado-mode/templates/")
  (setq ado-date-format "%Y-%m-%d"))
(add-hook 'ado-mode-hook '(lambda() (ado-custom)))


;; External files
;; --------------

(load-file "~/.emacs.d/skel.el")
